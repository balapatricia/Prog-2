package methods;

import java.util.ArrayList;
import java.util.List;

public class Method {

    public boolean isEven(int a){
//        try {
//            Thread.sleep(4000);
//        } catch (InterruptedException e) {
//            e.printStackTrace();
//        }
        return a % 2 == 0 ? true : false;
    }

    public List<Character> wordSlicer(String s){
        List<Character> result = new ArrayList<>();
        for (char c : s.toCharArray()){
            result.add(c);
        }
        return result;
    }
}

___________________________________________________

import methods.Method;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.CsvFileSource;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.MethodSource;

import java.time.Duration;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;

class MethodTest {

    @Test
    void isEven() {
        //Arrange
        Method m = new Method();
        //Act
        boolean result = m.isEven(4);
        //Assert
        assertEquals(true,result);
    }

    @Test
    void isEvenTrue() {
        //Arrange
        Method m = new Method();
        //Act
        boolean result = m.isEven(4);
        //Assert
        assertTrue(result);
    }

    @Test
    void isEvenTimeOut() {
        //Arrange
        Method m = new Method();
        //Assert
        assertTimeout(Duration.ofMillis(3000), () -> m.isEven(4));
    }


    @ParameterizedTest
    @MethodSource
    void isEvenMethod(int a, boolean expected) {
        //Arrange
        Method m = new Method();
        //Act
        boolean result = m.isEven(a);
        //Assert
        assertEquals(expected,result);
    }

    static Stream<Arguments> isEvenMethod(){
        return Stream.of(
                Arguments.arguments(5,false),
                Arguments.arguments(6,true),
                Arguments.arguments(11,false),
                Arguments.arguments(99,false));
    }


    @CsvSource({"4,true","5,false","67,false"})
    @ParameterizedTest
    void isEvenCsvSource(int a, boolean expected) {
        //Arrange
        Method m = new Method();
        //Act
        boolean result = m.isEven(a);
        //Assert
        assertEquals(expected,result);
    }

    @ParameterizedTest
    @CsvFileSource(delimiter = ';', resources = "data/even.csv", numLinesToSkip = 1)
    void isEvenCsvFileSource(int a, boolean expected) {
        //Arrange
        Method m = new Method();
        //Act
        boolean result = m.isEven(a);
        //Assert
        assertEquals(expected,result);
    }

    @Test
    void wordSlicer() {
        Method m = new Method();
        List<Character> result = m.wordSlicer("alma");
        List<Character> expected = Stream.of('a','l','m','a').collect(Collectors.toList());
        assertEquals(expected, result);
    }


    @ParameterizedTest
    @MethodSource
    void wordSlicerMethod(String s, List<Character> expected) {
        Method m = new Method();
        List<Character> result = m.wordSlicer(s);
        assertEquals(expected, result);
    }
    static Stream<Arguments> wordSlicerMethod(){
        return Stream.of(
                Arguments.arguments("alma",Stream.of('a','l','m','a').collect(Collectors.toList())),
                Arguments.arguments("körte",Stream.of('k','ö','r','t','e').collect(Collectors.toList())),
                Arguments.arguments("dió",Stream.of('d','i','ó').collect(Collectors.toList())),
                Arguments.arguments("mogyoró",Stream.of('m','o','g','y','o','r','ó').collect(Collectors.toList())));
    }

    @CsvSource({"alma,a:l:m:a","körte,k:ö:r:t:e"})
    @ParameterizedTest
    void wordSlicerCsv(String s, String e) {
        Method m = new Method();
        List<Character> result = m.wordSlicer(s);
        List<Character> expected = new ArrayList<>();
        for (char c : String.join("",e.split(":")).toCharArray()){
            expected.add(c);
        }
        assertEquals(expected, result);
    }

    @ParameterizedTest
    @CsvFileSource(delimiter = ',', resources = "data/slice.csv", numLinesToSkip = 1)
    void wordSlicerCsvFile(String s, String e) {
        Method m = new Method();
        List<Character> result = m.wordSlicer(s);
        List<Character> expected = new ArrayList<>();
        for (char c : String.join("",e.split(":")).toCharArray()){
            expected.add(c);
        }
        assertEquals(expected, result);
    }
}
